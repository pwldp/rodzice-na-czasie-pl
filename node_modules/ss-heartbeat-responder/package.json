{
  "name": "ss-heartbeat-responder",
  "description": "Heartbeat Request Responder for SocketStream",
  "author": {
    "name": "Matthew Willoughby",
    "email": "mattfredwill@gmail.com"
  },
  "version": "0.1.2",
  "main": "index.js",
  "engines": {
    "node": ">= 0.6.0"
  },
  "dependencies": {
    "redis": "*",
    "fakeredis": "*",
    "async": "*"
  },
  "readme": "# Heartbeat Request Responder for SocketStream 0.3 RC2\n\nThis is a request responder for SocketStream which provides a heartbeat mechanism keeping track of active sessions, and allowing the server to respond to client events such as disconnects.\n\n### Install\n\nGet it from GitHub or from npm:\n\n    npm install ss-heartbeat-responder\n\nInclude the responder in app.js:\n\n```javascript\nss.responders.add(require('ss-heartbeat-responder'));\n```\n\nOr, to load with options:\n\n```javascript\nss.responders.add(require('ss-heartbeat-responder'), { logging: 1, fakeRedis: true });\n```\n\nSee below for a full list of configuration options. I recommend reviewing the `purgeDelay`, `beatDelay`, and `expireDelay` options as the defaults may not be appropriate for your app.\n\n### Client Usage\n\nCall the following somewhere near the top of your client side code to kick off the heartbeat:\n\n```javascript\nss.heartbeatStart();\n```\n\nAnd if you want to stop the heartbeat process:\n\n```javascript\nss.heartbeatStop();\n```\n\nThis will also trigger a disconnected event on the server straight away, and might be useful to call on window.onunload.\n\n### Server Usage\n\nAfter adding the responder, you can listen for events on ss.heartbeat (or ss.api.heartbeat from app.js):\n\n```javascript\nss.heartbeat.on('disconnect', function(session) {\n  //session has session.userId, etc\n});\n```\n\nAll events return a session instance. The available events are:\n\n* `disconnect` - Fired when a client has not sent a heartbeat recently enough, or when a client calls ss.heartbeatStop().\n* `connect` - Fired when a client calls ss.heartbeatStart() to begin the heartbeat process.\n* `reconnect` - Fired when a client calls ss.heartbeatStart() to begin the heartbeat process and the server believes the client is still connected. For example if the user refreshes the page or opens a new tab with the same cookie.\n\nAlso available are:\n\n```javascript\nss.heartbeat.allConnected(function(sessions) {\n  //sessions is an array of all active sessions\n});\n\nss.heartbeat.isConnected(sessionId, function(err, res) {\n  //res == 0 if sessionId is considered idle or disconnected\n  //res == 1 if sessionId is active \n});\n\nss.heartbeat.purge(); //Immediately force a check for inactive sessions, triggering any disconnect events\n```\n\n### Server Configuration\n\nThe available configuration options are:\n\n* `name` - The name used in logging, as a redis prefix, and registered in ss.api. Default is `heartbeat`.\n* `logging` - The logging provided in the server console. Default is 0.\n  0: No logging. \n  1: Logging of connect, reconnect, and disconnect events. \n  2: Logging of all events, including heartbeats.\n* `purgeDelay` - How often, in seconds, the server checks for inactive sessions and emits disconnect events. Default is 25.\n* `beatDelay` - How often, in seconds, the client sends a heartbeat. Default is 30.\n* `expireDelay` - How long, in seconds, a heartbeat is considered valid. Should be __longer__ than beatDelay. If this time has passed since the last beat when a purge occurs, the session is considered inactive and the disconnect event is emitted. Default is 40.\n* `host` - Redis host. Default is `127.0.0.1`.\n* `port` - Redis port. Default is `6479`.\n* `options` - Redis options.\n* `fakeRedis` - If `true` no redis server is required, for development convenience. Default is `false`.\n* `pass` - Password for Redis authentication.\n* `db` - Redis database to `SELECT`.\n",
  "readmeFilename": "README.md",
  "_id": "ss-heartbeat-responder@0.1.2",
  "_from": "ss-heartbeat-responder@>= 0.1.2"
}
